import { createTool } from "@mastra/core/tools";
import { z } from "zod";
import { db, passengers, orders, driverOffers, priceNegotiations, drivers } from "../server/storage";
import { eq, desc } from "drizzle-orm";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
export const registerPassengerTool = createTool({
  id: "register-passenger",
  description: "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    firstName: z.string().describe("–ò–º—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞"),
    phoneNumber: z.string().describe("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    passengerId: z.number().optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId, firstName, phoneNumber } = context;
    
    logger?.info('üîß [RegisterPassenger] –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞', {
      telegramId, firstName, phoneNumber
    });
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–∞—Å—Å–∞–∂–∏—Ä
      const existingPassenger = await db.select().from(passengers)
        .where(eq(passengers.telegramId, telegramId));
      
      if (existingPassenger.length > 0) {
        logger?.info('üìù [RegisterPassenger] –ü–∞—Å—Å–∞–∂–∏—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', {
          passengerId: existingPassenger[0].id
        });
        
        return {
          success: true,
          passengerId: existingPassenger[0].id,
          message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${firstName}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.`
        };
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
      const newPassenger = await db.insert(passengers)
        .values({
          telegramId,
          firstName,
          phoneNumber,
        })
        .returning();
      
      logger?.info('‚úÖ [RegisterPassenger] –ü–∞—Å—Å–∞–∂–∏—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', {
        passengerId: newPassenger[0].id
      });
      
      return {
        success: true,
        passengerId: newPassenger[0].id,
        message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É —Ç–∞–∫—Å–∏, ${firstName}! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫–∏.`
      };
      
    } catch (error) {
      logger?.error('‚ùå [RegisterPassenger] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
export const createOrderTool = createTool({
  id: "create-order",
  description: "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –ø–∞—Å—Å–∞–∂–∏—Ä–∞"),
    fromAddress: z.string().describe("–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
    toAddress: z.string().describe("–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"),
    suggestedPrice: z.number().describe("–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    orderId: z.number().optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId, fromAddress, toAddress, suggestedPrice } = context;
    
    logger?.info('üîß [CreateOrder] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', {
      telegramId, fromAddress, toAddress, suggestedPrice
    });
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
      const passenger = await db.select().from(passengers)
        .where(eq(passengers.telegramId, telegramId));
      
      if (passenger.length === 0) {
        return {
          success: false,
          message: "–ü–∞—Å—Å–∞–∂–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        };
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const newOrder = await db.insert(orders)
        .values({
          passengerId: passenger[0].id,
          fromAddress,
          toAddress,
          suggestedPrice: suggestedPrice.toString(),
        })
        .returning();
      
      logger?.info('‚úÖ [CreateOrder] –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', {
        orderId: newOrder[0].id
      });
      
      return {
        success: true,
        orderId: newOrder[0].id,
        message: `–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ú–∞—Ä—à—Ä—É—Ç: ${fromAddress} ‚Üí ${toAddress}. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞: ${suggestedPrice} —Ä—É–±. –û–∂–∏–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π.`
      };
      
    } catch (error) {
      logger?.error('‚ùå [CreateOrder] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É
export const getOrderOffersTool = createTool({
  id: "get-order-offers",
  description: "–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∑–∞–∫–∞–∑—É",
  inputSchema: z.object({
    orderId: z.number().describe("ID –∑–∞–∫–∞–∑–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    offers: z.array(z.object({
      offerId: z.number(),
      driverName: z.string(),
      rating: z.string(),
      price: z.string(),
      message: z.string().optional(),
    })),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { orderId } = context;
    
    logger?.info('üîß [GetOrderOffers] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', { orderId });
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö
      const offers = await db.select({
        offerId: driverOffers.id,
        offeredPrice: driverOffers.offeredPrice,
        message: driverOffers.message,
        driverName: drivers.firstName,
        rating: drivers.rating,
      })
      .from(driverOffers)
      .leftJoin(drivers, eq(driverOffers.driverId, drivers.id))
      .where(eq(driverOffers.orderId, orderId));
      
      logger?.info('üìù [GetOrderOffers] –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', {
        count: offers.length
      });
      
      const formattedOffers = offers.map(offer => ({
        offerId: offer.offerId,
        driverName: offer.driverName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å",
        rating: offer.rating || "5.00",
        price: offer.offeredPrice || "0",
        message: offer.message || undefined,
      }));
      
      return {
        success: true,
        offers: formattedOffers,
        message: offers.length > 0 
          ? `–ü–æ–ª—É—á–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π`
          : "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π. –û–∂–∏–¥–∞–π—Ç–µ..."
      };
      
    } catch (error) {
      logger?.error('‚ùå [GetOrderOffers] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', { error });
      return {
        success: false,
        offers: [],
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
export const acceptOfferTool = createTool({
  id: "accept-offer",
  description: "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è",
  inputSchema: z.object({
    offerId: z.number().describe("ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
    orderId: z.number().describe("ID –∑–∞–∫–∞–∑–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
    driverInfo: z.object({
      name: z.string(),
      phone: z.string(),
      rating: z.string(),
      car: z.string(),
    }).optional(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { offerId, orderId } = context;
    
    logger?.info('üîß [AcceptOffer] –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', { offerId, orderId });
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∏ –≤–æ–¥–∏—Ç–µ–ª–µ
      const offer = await db.select()
        .from(driverOffers)
        .leftJoin(drivers, eq(driverOffers.driverId, drivers.id))
        .where(eq(driverOffers.id, offerId));
      
      if (offer.length === 0) {
        return {
          success: false,
          message: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        };
      }
      
      const driverData = offer[0].drivers;
      const offerData = offer[0].driver_offers;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      await db.update(orders)
        .set({
          status: "accepted",
          acceptedDriverId: offerData.driverId,
          finalPrice: offerData.offeredPrice,
        })
        .where(eq(orders.id, orderId));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      await db.update(driverOffers)
        .set({ status: "accepted" })
        .where(eq(driverOffers.id, offerId));
      
      logger?.info('‚úÖ [AcceptOffer] –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ', {
        offerId, driverId: offerData.driverId
      });
      
      const carInfo = driverData?.carModel 
        ? `${driverData.carModel} (${driverData.carColor || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç'})`
        : "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
      
      return {
        success: true,
        message: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –í–æ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.",
        driverInfo: {
          name: driverData?.firstName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
          phone: driverData?.phoneNumber || "–ù–µ —É–∫–∞–∑–∞–Ω",
          rating: driverData?.rating || "5.00",
          car: carInfo,
        }
      };
      
    } catch (error) {
      logger?.error('‚ùå [AcceptOffer] –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
export const makeCounterOfferTool = createTool({
  id: "make-counter-offer",
  description: "–°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ",
  inputSchema: z.object({
    orderId: z.number().describe("ID –∑–∞–∫–∞–∑–∞"),
    telegramId: z.string().describe("Telegram ID –ø–∞—Å—Å–∞–∂–∏—Ä–∞"),
    driverId: z.number().describe("ID –≤–æ–¥–∏—Ç–µ–ª—è"),
    counterPrice: z.number().describe("–í—Å—Ç—Ä–µ—á–Ω–∞—è —Ü–µ–Ω–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { orderId, telegramId, driverId, counterPrice } = context;
    
    logger?.info('üîß [MakeCounterOffer] –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', {
      orderId, telegramId, driverId, counterPrice
    });
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
      const passenger = await db.select().from(passengers)
        .where(eq(passengers.telegramId, telegramId));
      
      if (passenger.length === 0) {
        return {
          success: false,
          message: "–ü–∞—Å—Å–∞–∂–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
        };
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã
      await db.insert(priceNegotiations)
        .values({
          orderId,
          fromUserId: passenger[0].id,
          fromUserType: "passenger",
          toUserId: driverId,
          toUserType: "driver",
          proposedPrice: counterPrice.toString(),
        });
      
      logger?.info('‚úÖ [MakeCounterOffer] –í—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
      
      return {
        success: true,
        message: `–í—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${counterPrice} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.`
      };
      
    } catch (error) {
      logger?.error('‚ùå [MakeCounterOffer] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
      };
    }
  },
});
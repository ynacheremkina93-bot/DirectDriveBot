import { createTool } from "@mastra/core/tools";
import { z } from "zod";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram
export const sendTelegramMessageTool = createTool({
  id: "send-telegram-message",
  description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram",
  inputSchema: z.object({
    chatId: z.string().describe("Chat ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
    message: z.string().describe("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"),
    parseMode: z.enum(["Markdown", "HTML"]).optional().describe("–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞"),
    replyMarkup: z.object({
      inlineKeyboard: z.array(z.array(z.object({
        text: z.string(),
        callbackData: z.string().optional(),
      }))).optional(),
    }).optional().describe("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    messageId: z.number().optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { chatId, message, parseMode, replyMarkup } = context;
    
    logger?.info('üîß [SendTelegramMessage] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', {
      chatId, messageLength: message.length
    });
    
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      
      if (!botToken) {
        return {
          success: false,
          message: "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        };
      }
      
      const telegramApi = `https://api.telegram.org/bot${botToken}/sendMessage`;
      
      const requestBody: any = {
        chat_id: chatId,
        text: message,
        parse_mode: parseMode || "Markdown",
      };
      
      if (replyMarkup) {
        requestBody.reply_markup = {
          inline_keyboard: replyMarkup.inlineKeyboard?.map(row => 
            row.map(button => ({
              text: button.text,
              callback_data: button.callbackData,
            }))
          ) || [],
        };
      }
      
      const response = await fetch(telegramApi, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });
      
      const result = await response.json();
      
      if (result.ok) {
        logger?.info('‚úÖ [SendTelegramMessage] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
          messageId: result.result.message_id
        });
        
        return {
          success: true,
          messageId: result.result.message_id,
          message: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
        };
      } else {
        logger?.error('‚ùå [SendTelegramMessage] –û—à–∏–±–∫–∞ Telegram API', {
          error: result.description
        });
        
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ Telegram API: ${result.description}`
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [SendTelegramMessage] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
export const notifyDriversAboutOrderTool = createTool({
  id: "notify-drivers-about-order",
  description: "–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ",
  inputSchema: z.object({
    orderId: z.number().describe("ID –∑–∞–∫–∞–∑–∞"),
    fromAddress: z.string().describe("–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
    toAddress: z.string().describe("–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"),
    suggestedPrice: z.number().describe("–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞"),
    passengerName: z.string().describe("–ò–º—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞"),
    passengerRating: z.string().describe("–†–µ–π—Ç–∏–Ω–≥ –ø–∞—Å—Å–∞–∂–∏—Ä–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    notifiedCount: z.number(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { orderId, fromAddress, toAddress, suggestedPrice, passengerName, passengerRating } = context;

    logger?.info('üîß [NotifyDriversAboutOrder] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—è–º', {
      orderId
    });

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
      const onlineDrivers = await db.select().from(drivers).where(
        and(eq(drivers.isOnline, true), eq(drivers.isVerified, true))
      );

      const message = `üöó *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n` +
        `üìç *–ú–∞—Ä—à—Ä—É—Ç:* ${fromAddress} ‚Üí ${toAddress}\n` +
        `üí∞ *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞:* ${suggestedPrice} —Ä—É–±.\n` +
        `üë§ *–ü–∞—Å—Å–∞–∂–∏—Ä:* ${passengerName} (‚≠ê ${passengerRating})\n\n` +
        `–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?`;

      let sentCount = 0;
      for (const driver of onlineDrivers) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram
        const result = await sendTelegramMessageTool.execute({
          context: {
            chatId: driver.telegramId,
            message,
            parseMode: "Markdown"
          },
          mastra,
          runtimeContext: null as any,
        });
        if (result.success) sentCount++;
      }

      logger?.info('‚úÖ [NotifyDriversAboutOrder] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', {
        notifiedCount: sentCount
      });

      return {
        success: true,
        notifiedCount: sentCount,
        message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${sentCount} –≤–æ–¥–∏—Ç–µ–ª—è–º.`
      };

    } catch (error) {
      logger?.error('‚ùå [NotifyDriversAboutOrder] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', { error });
      return {
        success: false,
        notifiedCount: 0,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
      };
    }
  },
});
    
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
      // –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API
      
      const message = `üöó *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\\n\\n` +
        `üìç *–ú–∞—Ä—à—Ä—É—Ç:* ${fromAddress} ‚Üí ${toAddress}\\n` +
        `üí∞ *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞:* ${suggestedPrice} —Ä—É–±.\\n` +
        `üë§ *–ü–∞—Å—Å–∞–∂–∏—Ä:* ${passengerName} (‚≠ê ${passengerRating})\\n\\n` +
        `–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?`;
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º
      // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      
      logger?.info('‚úÖ [NotifyDriversAboutOrder] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
      
      return {
        success: true,
        notifiedCount: 0, // –ó–∞–≥–ª—É—à–∫–∞
        message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è–º."
      };
      
    } catch (error) {
      logger?.error('‚ùå [NotifyDriversAboutOrder] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', { error });
      return {
        success: false,
        notifiedCount: 0,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
export const notifyPassengerAboutOfferTool = createTool({
  id: "notify-passenger-about-offer",
  description: "–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è",
  inputSchema: z.object({
    passengerTelegramId: z.string().describe("Telegram ID –ø–∞—Å—Å–∞–∂–∏—Ä–∞"),
    driverName: z.string().describe("–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è"),
    driverRating: z.string().describe("–†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è"),
    offeredPrice: z.number().describe("–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞"),
    message: z.string().optional().describe("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è"),
    orderId: z.number().describe("ID –∑–∞–∫–∞–∑–∞"),
    offerId: z.number().describe("ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { passengerTelegramId, driverName, driverRating, offeredPrice, message: driverMessage, orderId, offerId } = context;
    
    logger?.info('üîß [NotifyPassengerAboutOffer] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞', {
      passengerTelegramId, orderId, offerId
    });
    
    try {
      let notificationText = `üöñ *–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!*\\n\\n` +
        `üë®‚Äç‚úàÔ∏è *–í–æ–¥–∏—Ç–µ–ª—å:* ${driverName} (‚≠ê ${driverRating})\\n` +
        `üí∞ *–¶–µ–Ω–∞:* ${offeredPrice} —Ä—É–±.\\n`;
      
      if (driverMessage) {
        notificationText += `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${driverMessage}\\n`;
      }
      
      notificationText += `\\n–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?`;
      
      // –£–ø—Ä–æ—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ –≤—ã–∑–æ–≤–∞ –¥—Ä—É–≥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
      logger?.info('‚úÖ [NotifyPassengerAboutOffer] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ');
      
      const result = {
        success: true,
        message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä—É."
      };
      
      return result;
      
    } catch (error) {
      logger?.error('‚ùå [NotifyPassengerAboutOffer] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
      };
    }
  },
});

import { createTool } from "@mastra/core/tools";
import { z } from "zod";
import { db, ratings, orders, passengers, drivers } from "../server/storage";
import { eq, and, avg } from "drizzle-orm";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ –ø–æ–µ–∑–¥–∫–∏
export const rateRideTool = createTool({
  id: "rate-ride",
  description: "–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    orderId: z.number().describe("ID –∑–∞–∫–∞–∑–∞"),
    userType: z.enum(["passenger", "driver"]).describe("–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    rating: z.number().min(1).max(5).describe("–û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥"),
    comment: z.string().optional().describe("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ü–µ–Ω–∫–µ"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId, orderId, userType, rating, comment } = context;
    
    logger?.info('üîß [RateRide] –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏', {
      telegramId, orderId, userType, rating
    });
    
    try {
      let fromUserId: number;
      let toUserId: number;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      const order = await db.select()
        .from(orders)
        .where(eq(orders.id, orderId));
      
      if (order.length === 0) {
        return {
          success: false,
          message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        };
      }
      
      const orderData = order[0];
      
      if (userType === "passenger") {
        // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        const passenger = await db.select().from(passengers)
          .where(eq(passengers.telegramId, telegramId));
        
        if (passenger.length === 0 || passenger[0].id !== orderData.passengerId) {
          return {
            success: false,
            message: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞."
          };
        }
        
        fromUserId = passenger[0].id;
        toUserId = orderData.acceptedDriverId!;
        
      } else {
        // –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è
        const driver = await db.select().from(drivers)
          .where(eq(drivers.telegramId, telegramId));
        
        if (driver.length === 0 || driver[0].id !== orderData.acceptedDriverId) {
          return {
            success: false,
            message: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–æ–¥–∏—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞."
          };
        }
        
        fromUserId = driver[0].id;
        toUserId = orderData.passengerId;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –ø–æ–µ–∑–¥–∫—É
      const existingRating = await db.select().from(ratings)
        .where(and(
          eq(ratings.orderId, orderId),
          eq(ratings.fromUserId, fromUserId)
        ));
      
      if (existingRating.length > 0) {
        return {
          success: false,
          message: "–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É –ø–æ–µ–∑–¥–∫—É."
        };
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω–∫—É
      await db.insert(ratings)
        .values({
          orderId,
          fromUserId,
          fromUserType: userType,
          toUserId,
          toUserType: userType === "passenger" ? "driver" : "passenger",
          rating,
          comment: comment || null,
        });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await updateUserRating(toUserId, userType === "passenger" ? "driver" : "passenger");
      
      logger?.info('‚úÖ [RateRide] –û—Ü–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
      
      return {
        success: true,
        message: `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${rating} –∑–≤–µ–∑–¥.`
      };
      
    } catch (error) {
      logger?.error('‚ùå [RateRide] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserRatingTool = createTool({
  id: "get-user-rating",
  description: "–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
  inputSchema: z.object({
    userId: z.number().describe("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    userType: z.enum(["passenger", "driver"]).describe("–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    rating: z.string().optional(),
    totalRatings: z.number().optional(),
    recentComments: z.array(z.string()).optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { userId, userType } = context;
    
    logger?.info('üîß [GetUserRating] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞', { userId, userType });
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRatings = await db.select({
        rating: ratings.rating,
        comment: ratings.comment,
        createdAt: ratings.createdAt,
      })
      .from(ratings)
      .where(and(
        eq(ratings.toUserId, userId),
        eq(ratings.toUserType, userType)
      ))
      .orderBy(ratings.createdAt);
      
      if (userRatings.length === 0) {
        return {
          success: true,
          rating: "5.00",
          totalRatings: 0,
          recentComments: [],
          message: "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫."
        };
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
      const avgRating = userRatings.reduce((sum, r) => sum + r.rating, 0) / userRatings.length;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      const recentComments = userRatings
        .filter(r => r.comment)
        .slice(-5)
        .map(r => r.comment!)
        .reverse();
      
      return {
        success: true,
        rating: avgRating.toFixed(2),
        totalRatings: userRatings.length,
        recentComments,
        message: `–†–µ–π—Ç–∏–Ω–≥: ${avgRating.toFixed(2)} (${userRatings.length} –æ—Ü–µ–Ω–æ–∫)`
      };
      
    } catch (error) {
      logger?.error('‚ùå [GetUserRating] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞."
      };
    }
  },
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
async function updateUserRating(userId: number, userType: string) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRatings = await db.select({
      rating: ratings.rating,
    })
    .from(ratings)
    .where(and(
      eq(ratings.toUserId, userId),
      eq(ratings.toUserType, userType)
    ));
    
    if (userRatings.length === 0) return;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    const avgRating = userRatings.reduce((sum, r) => sum + r.rating, 0) / userRatings.length;
    const totalRides = userRatings.length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userType === "driver") {
      await db.update(drivers)
        .set({ 
          rating: avgRating.toFixed(2),
          totalRides: totalRides
        })
        .where(eq(drivers.id, userId));
    } else {
      await db.update(passengers)
        .set({ 
          rating: avgRating.toFixed(2),
          totalRides: totalRides
        })
        .where(eq(passengers.id, userId));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
  }
}
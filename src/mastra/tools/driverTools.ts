import { createTool } from "@mastra/core/tools";
import { z } from "zod";
import { db, drivers, orders, driverOffers, driverDocuments, priceNegotiations, passengers } from "../server/storage";
import { eq, and, desc } from "drizzle-orm";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
export const registerDriverTool = createTool({
  id: "register-driver",
  description: "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    firstName: z.string().describe("–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è"),
    phoneNumber: z.string().describe("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è"),
    carModel: z.string().describe("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
    carColor: z.string().describe("–¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
    carNumber: z.string().describe("–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    driverId: z.number().optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId, firstName, phoneNumber, carModel, carColor, carNumber } = context;
    
    logger?.info('üîß [RegisterDriver] –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è', {
      telegramId, firstName, phoneNumber, carModel
    });
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≤–æ–¥–∏—Ç–µ–ª—å
      const existingDriver = await db.select().from(drivers)
        .where(eq(drivers.telegramId, telegramId));
      
      if (existingDriver.length > 0) {
        logger?.info('üìù [RegisterDriver] –í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', {
          driverId: existingDriver[0].id
        });
        
        return {
          success: true,
          driverId: existingDriver[0].id,
          message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${firstName}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.`
        };
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
      const newDriver = await db.insert(drivers)
        .values({
          telegramId,
          firstName,
          phoneNumber,
          carModel,
          carColor,
          carNumber,
          isVerified: false, // –¢—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        })
        .returning();
      
      logger?.info('‚úÖ [RegisterDriver] –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', {
        driverId: newDriver[0].id
      });
      
      return {
        success: true,
        driverId: newDriver[0].id,
        message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É, ${firstName}! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å.`
      };
      
    } catch (error) {
      logger?.error('‚ùå [RegisterDriver] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
export const getAvailableOrdersTool = createTool({
  id: "get-available-orders",
  description: "–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –≤–æ–¥–∏—Ç–µ–ª—è"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    orders: z.array(z.object({
      orderId: z.number(),
      fromAddress: z.string(),
      toAddress: z.string(),
      suggestedPrice: z.string(),
      passengerName: z.string(),
      passengerRating: z.string(),
      createdAt: z.string(),
    })),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId } = context;
    
    logger?.info('üîß [GetAvailableOrders] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤', { telegramId });
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await db.select().from(drivers)
        .where(eq(drivers.telegramId, telegramId));
      
      if (driver.length === 0) {
        return {
          success: false,
          orders: [],
          message: "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        };
      }
      
      if (!driver[0].isVerified) {
        return {
          success: false,
          orders: [],
          message: "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
        };
      }
      
      if (!driver[0].isOnline) {
        return {
          success: false,
          orders: [],
          message: "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞—Ç—É—Å–µ '–æ—Ñ–ª–∞–π–Ω'. –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º '–æ–Ω–ª–∞–π–Ω' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤."
        };
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      const availableOrders = await db.select({
        orderId: orders.id,
        fromAddress: orders.fromAddress,
        toAddress: orders.toAddress,
        suggestedPrice: orders.suggestedPrice,
        createdAt: orders.createdAt,
        passengerName: passengers.firstName,
        passengerRating: passengers.rating,
      })
      .from(orders)
      .leftJoin(passengers, eq(orders.passengerId, passengers.id))
      .where(eq(orders.status, "pending"))
      .orderBy(desc(orders.createdAt));
      
      logger?.info('üìù [GetAvailableOrders] –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤', {
        count: availableOrders.length
      });
      
      const formattedOrders = availableOrders.map(order => ({
        orderId: order.orderId,
        fromAddress: order.fromAddress,
        toAddress: order.toAddress,
        suggestedPrice: order.suggestedPrice || "0",
        passengerName: order.passengerName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
        passengerRating: order.passengerRating || "5.00",
        createdAt: order.createdAt?.toISOString() || new Date().toISOString(),
      }));
      
      return {
        success: true,
        orders: formattedOrders,
        message: availableOrders.length > 0 
          ? `–ù–∞–π–¥–µ–Ω–æ ${availableOrders.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤`
          : "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ."
      };
      
    } catch (error) {
      logger?.error('‚ùå [GetAvailableOrders] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤', { error });
      return {
        success: false,
        orders: [],
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
export const makeOfferTool = createTool({
  id: "make-offer",
  description: "–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –∑–∞–∫–∞–∑—É",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –≤–æ–¥–∏—Ç–µ–ª—è"),
    orderId: z.number().describe("ID –∑–∞–∫–∞–∑–∞"),
    offeredPrice: z.number().describe("–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞"),
    message: z.string().optional().describe("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId, orderId, offeredPrice, message } = context;
    
    logger?.info('üîß [MakeOffer] –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', {
      telegramId, orderId, offeredPrice, message
    });
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await db.select().from(drivers)
        .where(eq(drivers.telegramId, telegramId));
      
      if (driver.length === 0) {
        return {
          success: false,
          message: "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        };
      }
      
      if (!driver[0].isVerified) {
        return {
          success: false,
          message: "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é."
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      const existingOffer = await db.select().from(driverOffers)
        .where(and(
          eq(driverOffers.orderId, orderId),
          eq(driverOffers.driverId, driver[0].id)
        ));
      
      if (existingOffer.length > 0) {
        return {
          success: false,
          message: "–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É."
        };
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      await db.insert(driverOffers)
        .values({
          orderId,
          driverId: driver[0].id,
          offeredPrice: offeredPrice.toString(),
          message: message || null,
        });
      
      logger?.info('‚úÖ [MakeOffer] –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
      
      return {
        success: true,
        message: `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –¶–µ–Ω–∞: ${offeredPrice} —Ä—É–±. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–∞.`
      };
      
    } catch (error) {
      logger?.error('‚ùå [MakeOffer] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è
export const setDriverStatusTool = createTool({
  id: "set-driver-status",
  description: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è (–æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω)",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –≤–æ–¥–∏—Ç–µ–ª—è"),
    isOnline: z.boolean().describe("–°—Ç–∞—Ç—É—Å: true - –æ–Ω–ª–∞–π–Ω, false - –æ—Ñ–ª–∞–π–Ω"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
    currentStatus: z.string().optional(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId, isOnline } = context;
    
    logger?.info('üîß [SetDriverStatus] –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', {
      telegramId, isOnline
    });
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await db.select().from(drivers)
        .where(eq(drivers.telegramId, telegramId));
      
      if (driver.length === 0) {
        return {
          success: false,
          message: "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        };
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await db.update(drivers)
        .set({ isOnline })
        .where(eq(drivers.telegramId, telegramId));
      
      const statusText = isOnline ? "–æ–Ω–ª–∞–π–Ω" : "–æ—Ñ–ª–∞–π–Ω";
      
      logger?.info('‚úÖ [SetDriverStatus] –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω', {
        driverId: driver[0].id, status: statusText
      });
      
      return {
        success: true,
        message: `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusText}". ${isOnline ? '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.' : '–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã.'}`,
        currentStatus: statusText
      };
      
    } catch (error) {
      logger?.error('‚ùå [SetDriverStatus] –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
export const respondToCounterOfferTool = createTool({
  id: "respond-to-counter-offer",
  description: "–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –≤–æ–¥–∏—Ç–µ–ª—è"),
    negotiationId: z.number().describe("ID –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤"),
    accept: z.boolean().describe("–ü—Ä–∏–Ω—è—Ç—å (true) –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å (false)"),
    counterPrice: z.number().optional().describe("–ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–Ω–∞—è —Ü–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç)"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId, negotiationId, accept, counterPrice } = context;
    
    logger?.info('üîß [RespondToCounterOffer] –û—Ç–≤–µ—Ç –Ω–∞ –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', {
      telegramId, negotiationId, accept, counterPrice
    });
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await db.select().from(drivers)
        .where(eq(drivers.telegramId, telegramId));
      
      if (driver.length === 0) {
        return {
          success: false,
          message: "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        };
      }
      
      if (accept) {
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        await db.update(priceNegotiations)
          .set({ status: "accepted" })
          .where(eq(priceNegotiations.id, negotiationId));
        
        return {
          success: true,
          message: "–í—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."
        };
      } else if (counterPrice) {
        // –î–µ–ª–∞–µ–º –Ω–æ–≤–æ–µ –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        const negotiation = await db.select()
          .from(priceNegotiations)
          .where(eq(priceNegotiations.id, negotiationId));
        
        if (negotiation.length === 0) {
          return {
            success: false,
            message: "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
          };
        }
        
        await db.insert(priceNegotiations)
          .values({
            orderId: negotiation[0].orderId,
            fromUserId: driver[0].id,
            fromUserType: "driver",
            toUserId: negotiation[0].fromUserId,
            toUserType: "passenger",
            proposedPrice: counterPrice.toString(),
          });
        
        return {
          success: true,
          message: `–ù–æ–≤–æ–µ –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${counterPrice} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Å—Å–∞–∂–∏—Ä—É.`
        };
      } else {
        // –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        await db.update(priceNegotiations)
          .set({ status: "rejected" })
          .where(eq(priceNegotiations.id, negotiationId));
        
        return {
          success: true,
          message: "–í—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [RespondToCounterOffer] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."
      };
    }
  },
});
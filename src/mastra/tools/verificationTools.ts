import { createTool } from "@mastra/core/tools";
import { z } from "zod";
import { db, drivers, driverDocuments } from "../server/storage";
import { eq, and } from "drizzle-orm";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const uploadDocumentTool = createTool({
  id: "upload-document",
  description: "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –≤–æ–¥–∏—Ç–µ–ª—è"),
    documentType: z.enum(["license", "vehicle_registration", "insurance"]).describe("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
    documentData: z.object({
      number: z.string().describe("–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
      issuedBy: z.string().describe("–ö–µ–º –≤—ã–¥–∞–Ω"),
      issueDate: z.string().describe("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏"),
      expiryDate: z.string().optional().describe("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"),
      additionalInfo: z.string().optional().describe("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    }).describe("–î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
    documentId: z.number().optional(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId, documentType, documentData } = context;
    
    logger?.info('üîß [UploadDocument] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞', {
      telegramId, documentType
    });
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await db.select().from(drivers)
        .where(eq(drivers.telegramId, telegramId));
      
      if (driver.length === 0) {
        return {
          success: false,
          message: "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
      const existingDoc = await db.select().from(driverDocuments)
        .where(and(
          eq(driverDocuments.driverId, driver[0].id),
          eq(driverDocuments.documentType, documentType)
        ));
      
      if (existingDoc.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        await db.update(driverDocuments)
          .set({
            documentData: documentData,
            status: "pending",
            rejectionReason: null,
            updatedAt: new Date(),
          })
          .where(eq(driverDocuments.id, existingDoc[0].id));
        
        logger?.info('üìù [UploadDocument] –î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω', {
          documentId: existingDoc[0].id
        });
        
        return {
          success: true,
          documentId: existingDoc[0].id,
          message: getDocumentTypeMessage(documentType) + " –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
        };
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        const newDoc = await db.insert(driverDocuments)
          .values({
            driverId: driver[0].id,
            documentType,
            documentData: documentData,
            status: "pending",
          })
          .returning();
        
        logger?.info('‚úÖ [UploadDocument] –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω', {
          documentId: newDoc[0].id
        });
        
        return {
          success: true,
          documentId: newDoc[0].id,
          message: getDocumentTypeMessage(documentType) + " –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∏–∑–≤–µ—Å—Ç–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [UploadDocument] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const checkVerificationStatusTool = createTool({
  id: "check-verification-status",
  description: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è",
  inputSchema: z.object({
    telegramId: z.string().describe("Telegram ID –≤–æ–¥–∏—Ç–µ–ª—è"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    isVerified: z.boolean().optional(),
    documents: z.array(z.object({
      type: z.string(),
      status: z.string(),
      rejectionReason: z.string().optional(),
    })).optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { telegramId } = context;
    
    logger?.info('üîß [CheckVerificationStatus] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', {
      telegramId
    });
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await db.select().from(drivers)
        .where(eq(drivers.telegramId, telegramId));
      
      if (driver.length === 0) {
        return {
          success: false,
          message: "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        };
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è
      const documents = await db.select().from(driverDocuments)
        .where(eq(driverDocuments.driverId, driver[0].id));
      
      const documentStatuses = documents.map(doc => ({
        type: getDocumentTypeMessage(doc.documentType),
        status: getStatusMessage(doc.status),
        rejectionReason: doc.rejectionReason || undefined,
      }));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const requiredDocs = ["license", "vehicle_registration"];
      const approvedDocs = documents.filter(doc => doc.status === "approved");
      const hasAllRequiredApproved = requiredDocs.every(type => 
        approvedDocs.some(doc => doc.documentType === type)
      );
      
      const isVerified = hasAllRequiredApproved && Boolean(driver[0].isVerified);
      
      let message = `–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${isVerified ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}\\n\\n`;
      
      if (documentStatuses.length === 0) {
        message += "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å.";
      } else {
        message += "–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\\n" + 
          documentStatuses.map(doc => 
            `‚Ä¢ ${doc.type}: ${doc.status}${doc.rejectionReason ? ` (${doc.rejectionReason})` : ''}`
          ).join('\\n');
      }
      
      return {
        success: true,
        isVerified,
        documents: documentStatuses,
        message
      };
      
    } catch (error) {
      logger?.error('‚ùå [CheckVerificationStatus] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞."
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export const processDocumentVerificationTool = createTool({
  id: "process-document-verification",
  description: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–¥–æ–±—Ä—è–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç)",
  inputSchema: z.object({
    documentId: z.number().describe("ID –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
    approve: z.boolean().describe("–û–¥–æ–±—Ä–∏—Ç—å (true) –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å (false)"),
    rejectionReason: z.string().optional().describe("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    const { documentId, approve, rejectionReason } = context;
    
    logger?.info('üîß [ProcessDocumentVerification] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', {
      documentId, approve, rejectionReason
    });
    
    try {
      const newStatus = approve ? "approved" : "rejected";
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
      await db.update(driverDocuments)
        .set({
          status: newStatus,
          rejectionReason: approve ? null : (rejectionReason || null),
          updatedAt: new Date(),
        })
        .where(eq(driverDocuments.id, documentId));
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏ –≤–æ–¥–∏—Ç–µ–ª–µ
      const document = await db.select()
        .from(driverDocuments)
        .where(eq(driverDocuments.id, documentId));
      
      if (document.length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ç–µ–ø–µ—Ä—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è
        await checkAndUpdateDriverVerification(document[0].driverId);
      }
      
      logger?.info('‚úÖ [ProcessDocumentVerification] –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      
      return {
        success: true,
        message: `–î–æ–∫—É–º–µ–Ω—Ç ${approve ? '–æ–¥–æ–±—Ä–µ–Ω' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}.`
      };
      
    } catch (error) {
      logger?.error('‚ùå [ProcessDocumentVerification] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', { error });
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."
      };
    }
  },
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function getDocumentTypeMessage(type: string): string {
  switch (type) {
    case "license": return "–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ";
    case "vehicle_registration": return "–î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å";
    case "insurance": return "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞";
    default: return "–î–æ–∫—É–º–µ–Ω—Ç";
  }
}

function getStatusMessage(status: string): string {
  switch (status) {
    case "pending": return "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏";
    case "approved": return "–û–¥–æ–±—Ä–µ–Ω";
    case "rejected": return "–û—Ç–∫–ª–æ–Ω–µ–Ω";
    default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }
}

async function checkAndUpdateDriverVerification(driverId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è
    const documents = await db.select().from(driverDocuments)
      .where(eq(driverDocuments.driverId, driverId));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–æ–±—Ä–µ–Ω—ã –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const requiredDocs = ["license", "vehicle_registration"];
    const approvedDocs = documents.filter(doc => doc.status === "approved");
    const hasAllRequiredApproved = requiredDocs.every(type => 
      approvedDocs.some(doc => doc.documentType === type)
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    await db.update(drivers)
      .set({
        isVerified: hasAllRequiredApproved,
        licenseStatus: hasAllRequiredApproved ? "approved" : "pending",
        vehicleStatus: hasAllRequiredApproved ? "approved" : "pending",
      })
      .where(eq(drivers.id, driverId));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
  }
}
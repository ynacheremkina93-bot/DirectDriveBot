import { createWorkflow, createStep } from "../inngest";
import { z } from "zod";
import { driverAgent } from "../agents/driverAgent";
import { sendTelegramMessageTool } from "../tools/telegramTools";

// –®–∞–≥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è
const useDriverAgentStep = createStep({
  id: "use-driver-agent",
  description: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞",
  inputSchema: z.object({
    message: z.string().describe("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è"),
    threadId: z.string().describe("ID –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞"),
    chatId: z.string().describe("Chat ID –≤–æ–¥–∏—Ç–µ–ª—è"),
  }),
  outputSchema: z.object({
    response: z.string().describe("–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞"),
    chatId: z.string().describe("Chat ID –≤–æ–¥–∏—Ç–µ–ª—è"),
  }),
  execute: async ({ inputData, mastra }) => {
    const logger = mastra?.getLogger();
    const { message, threadId, chatId } = inputData;
    
    logger?.info('üîß [DriverWorkflow] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è', {
      messageLength: message.length,
      threadId
    });
    
    try {
      const { text } = await driverAgent.generate([
        { role: "user", content: message }
      ], {
        resourceId: "driver-bot",
        threadId,
        maxSteps: 5,
      });
      
      logger?.info('‚úÖ [DriverWorkflow] –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω');
      
      return {
        response: text,
        chatId
      };
      
    } catch (error) {
      logger?.error('‚ùå [DriverWorkflow] –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞', { error });
      return {
        response: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        chatId
      };
    }
  }
});

// –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—é
const sendReplyToDriverStep = createStep({
  id: "send-reply-to-driver",
  description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—é –≤ Telegram",
  inputSchema: z.object({
    response: z.string().describe("–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞"),
    chatId: z.string().describe("Chat ID –≤–æ–¥–∏—Ç–µ–ª—è"),
  }),
  outputSchema: z.object({
    sent: z.boolean().describe("–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏"),
    messageId: z.number().optional().describe("ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"),
  }),
  execute: async ({ inputData, mastra }) => {
    const logger = mastra?.getLogger();
    const { response, chatId } = inputData;
    
    logger?.info('üîß [DriverWorkflow] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—é', {
      chatId,
      responseLength: response.length
    });
    
    try {
      const result = await sendTelegramMessageTool.execute({
        context: {
          chatId,
          message: response,
          parseMode: "Markdown",
        },
        mastra,
        runtimeContext: null as any,
      });
      
      if (result.success) {
        logger?.info('‚úÖ [DriverWorkflow] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', {
          messageId: result.messageId
        });
        
        return {
          sent: true,
          messageId: result.messageId,
        };
      } else {
        logger?.error('‚ùå [DriverWorkflow] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', {
          error: result.message
        });
        
        return {
          sent: false,
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [DriverWorkflow] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞', { error });
      return {
        sent: false,
      };
    }
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ workflow –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞
export const driverWorkflow = createWorkflow({
  id: "driver-workflow",
  description: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã",
  inputSchema: z.object({
    message: z.string(),
    threadId: z.string(),
    chatId: z.string(),
  }),
  outputSchema: z.object({
    sent: z.boolean(),
    messageId: z.number().optional(),
  }),
})
  .then(useDriverAgentStep)
  .then(sendReplyToDriverStep)
  .commit();
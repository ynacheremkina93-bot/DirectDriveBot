import { createWorkflow, createStep } from "../inngest";
import { z } from "zod";
import { passengerAgent } from "../agents/passengerAgent";
import { driverAgent } from "../agents/driverAgent";
import { sendTelegramMessageTool } from "../tools/telegramTools";
import { db, passengers, drivers } from "../server/storage";
import { eq } from "drizzle-orm";

// –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
const useAgentStep = createStep({
  id: "use-agent",
  description: "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–≥–µ–Ω—Ç",
  inputSchema: z.object({
    message: z.string().describe("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    threadId: z.string().describe("ID –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞"),
    chatId: z.string().describe("Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    telegramId: z.string().describe("Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
  }),
  outputSchema: z.object({
    response: z.string().describe("–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞"),
    chatId: z.string().describe("Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    userType: z.string().describe("–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: passenger, driver, unknown"),
  }),
  execute: async ({ inputData, mastra }) => {
    const logger = mastra?.getLogger();
    const { message, threadId, chatId, telegramId } = inputData;
    
    logger?.info('üîß [TaxiWorkflow] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      telegramId, messageLength: message.length
    });
    
    try {
      let userType = "unknown";
      let selectedAgent = passengerAgent; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –ø–∞—Å—Å–∞–∂–∏—Ä
      const passenger = await db.select().from(passengers)
        .where(eq(passengers.telegramId, telegramId));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
      const driver = await db.select().from(drivers)
        .where(eq(drivers.telegramId, telegramId));
      
      if (passenger.length > 0 && driver.length > 0) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∫–∞–∫ –ø–∞—Å—Å–∞–∂–∏—Ä, –∏ –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
        const lowerMessage = message.toLowerCase();
        if (lowerMessage.includes('–∑–∞–∫–∞–∑') || lowerMessage.includes('—Ç–∞–∫—Å–∏') || 
            lowerMessage.includes('–µ—Ö–∞—Ç—å') || lowerMessage.includes('–ø–æ–µ–∑–¥–∫')) {
          userType = "passenger";
          selectedAgent = passengerAgent;
        } else if (lowerMessage.includes('–≤–æ–¥–∏—Ç') || lowerMessage.includes('—Ä–∞–±–æ—Ç') || 
                   lowerMessage.includes('—Å—Ç–∞—Ç—É—Å') || lowerMessage.includes('–æ–Ω–ª–∞–π–Ω')) {
          userType = "driver";
          selectedAgent = driverAgent;
        } else {
          // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞—Å—Å–∞–∂–∏—Ä, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ—è—Å–µ–Ω
          userType = "passenger";
          selectedAgent = passengerAgent;
        }
      } else if (driver.length > 0) {
        userType = "driver";
        selectedAgent = driverAgent;
      } else if (passenger.length > 0) {
        userType = "passenger";
        selectedAgent = passengerAgent;
      } else {
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
        const lowerMessage = message.toLowerCase();
        if (lowerMessage.includes('–≤–æ–¥–∏—Ç') || lowerMessage.includes('—Ä–∞–±–æ—Ç–∞—Ç') || 
            lowerMessage.includes('–∑–∞—Ä–∞–±–∞—Ç') || lowerMessage.includes('–º–∞—à–∏–Ω')) {
          userType = "driver";
          selectedAgent = driverAgent;
        } else {
          userType = "passenger";
          selectedAgent = passengerAgent;
        }
      }
      
      logger?.info('üìù [TaxiWorkflow] –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', {
        userType, telegramId
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      const { text } = await selectedAgent.generate([
        { role: "user", content: message }
      ], {
        resourceId: `${userType}-bot`,
        threadId: `${userType}-${threadId}`,
        maxSteps: 5,
      });
      
      logger?.info('‚úÖ [TaxiWorkflow] –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω');
      
      return {
        response: text,
        chatId,
        userType,
      };
      
    } catch (error) {
      logger?.error('‚ùå [TaxiWorkflow] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', { error });
      return {
        response: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        chatId,
        userType: "unknown",
      };
    }
  }
});

// –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const sendReplyStep = createStep({
  id: "send-reply",
  description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram",
  inputSchema: z.object({
    response: z.string().describe("–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞"),
    chatId: z.string().describe("Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    userType: z.string().describe("–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
  }),
  outputSchema: z.object({
    sent: z.boolean().describe("–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏"),
    messageId: z.number().optional().describe("ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"),
  }),
  execute: async ({ inputData, mastra }) => {
    const logger = mastra?.getLogger();
    const { response, chatId, userType } = inputData;
    
    logger?.info('üîß [TaxiWorkflow] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      chatId, userType, responseLength: response.length
    });
    
    try {
      const result = await sendTelegramMessageTool.execute({
        context: {
          chatId,
          message: response,
          parseMode: "Markdown",
        },
        mastra,
        runtimeContext: null as any,
      });
      
      if (result.success) {
        logger?.info('‚úÖ [TaxiWorkflow] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', {
          messageId: result.messageId, userType
        });
        
        return {
          sent: true,
          messageId: result.messageId,
        };
      } else {
        logger?.error('‚ùå [TaxiWorkflow] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', {
          error: result.message
        });
        
        return {
          sent: false,
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [TaxiWorkflow] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞', { error });
      return {
        sent: false,
      };
    }
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ workflow –¥–ª—è —Ç–∞–∫—Å–∏-–±–æ—Ç–∞
export const taxiWorkflow = createWorkflow({
  id: "taxi-workflow",
  description: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø (–ø–∞—Å—Å–∞–∂–∏—Ä/–≤–æ–¥–∏—Ç–µ–ª—å) –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–≥–µ–Ω—Ç",
  inputSchema: z.object({
    message: z.string(),
    threadId: z.string(),
    chatId: z.string(),
    telegramId: z.string(),
  }),
  outputSchema: z.object({
    sent: z.boolean(),
    messageId: z.number().optional(),
  }),
})
  .then(useAgentStep)
  .then(sendReplyStep)
  .commit();